//! End-to-end schema consumer crate.
//!
//! This crate is part of the end-to-end JSON schema use and replacement example
//! in this repository. See the parent README for more.
//!
//! For more about typify, see [its documentation](typify).

// Typify has several ways to generate types from JSON schemas. This example
// uses the `import_types` proc macro.
use typify::import_types;

import_types!(
    schema = "../e2e-schema-producer/tests/output/assignment-schema.json",
    // This is the magic: a list of crates that contain types suitable for
    // automatic replacement.
    crates = {
        // `crates` is a map from crate name to version. The version can be a
        // specfic version or `*` to match any version. As long as this version
        // matches what's in the schema, the types will be compatible.
        //
        // Because of the way automatic replacement works, the only crate that
        // needs to be specified is `e2e-kinds`. Each type will automatically be
        // replaced with the corresponding type *alias* from `e2e-kinds`
        // (typically `SomethingUuid`).
        "e2e-kinds" = "*",
    }
);

#[cfg(test)]
mod tests {
    #[test]
    fn test_generated_types_work() {
        // These types are defined in the kinds crate.
        let user_id = e2e_kinds::UserUuid::new_v4();
        let organization_id = e2e_kinds::OrganizationUuid::new_v4();

        // `Assignment` is generated by `import_types!` above, and the fields
        // within it have been automatically replaced.
        let assignment = crate::Assignment {
            user_id,
            organization_id,
        };
        println!("assignment: {:?}", assignment);
    }
}
