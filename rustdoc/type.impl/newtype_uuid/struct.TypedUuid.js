(function() {
    var type_impls = Object.fromEntries([["e2e_kinds",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arbitrary-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#649-651\">Source</a><a href=\"#impl-Arbitrary-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Arbitrary for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3><div class=\"docblock\"><p>Generates random <code>TypedUuid&lt;T&gt;</code> instances.</p>\n</div></section></summary><div class=\"docblock\"><p>Currently, this always returns a version 4 UUID. Support for other kinds\nof UUIDs might be added via <a href=\"newtype_uuid/struct.TypedUuid.html#associatedtype.Parameters\" title=\"associated type newtype_uuid::TypedUuid::Parameters\"><code>Self::Parameters</code></a> in the future.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Parameters\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#653\">Source</a><a href=\"#associatedtype.Parameters\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Parameters</a> = TypedUuidParams</h4></section></summary><div class='docblock'>The type of parameters that <a href=\"trait.Arbitrary.html#tymethod.arbitrary_with\"><code>arbitrary_with</code></a> accepts for configuration\nof the generated <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a>. Parameters must implement <a href=\"https://doc.rust-lang.org/nightly/std/default/trait.Default.html\"><code>Default</code></a>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Strategy\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#654\">Source</a><a href=\"#associatedtype.Strategy\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Strategy</a> = BoxedStrategy&lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The type of <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> used to generate values of type <code>Self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#656\">Source</a><a href=\"#method.arbitrary_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arbitrary_with</a>(\n    _args: &lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt; as Arbitrary&gt;::Parameters,\n) -&gt; &lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt; as Arbitrary&gt;::Strategy</h4></section></summary><div class='docblock'>Generates a <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> for producing arbitrary values of type the\nimplementing type (<code>Self</code>). The strategy is passed the arguments given\nin args. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary\" class=\"method trait-impl\"><a href=\"#method.arbitrary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arbitrary</a>() -&gt; Self::Strategy</h4></section></summary><div class='docblock'>Generates a <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> for producing arbitrary values\nof type the implementing type (<code>Self</code>). <a>Read more</a></div></details></div></details>","Arbitrary","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#497\">Source</a><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#499\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#469\">Source</a><a href=\"#impl-Clone-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#471\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#456\">Source</a><a href=\"#impl-Debug-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#457\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#490\">Source</a><a href=\"#impl-Default-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#492\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#463\">Source</a><a href=\"#impl-Display-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#464\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#478\">Source</a><a href=\"#impl-FromStr-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#479\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"newtype_uuid/struct.ParseError.html\" title=\"struct newtype_uuid::ParseError\">ParseError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#481\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;, &lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericUuid-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#907\">Source</a><a href=\"#impl-GenericUuid-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"newtype_uuid/trait.GenericUuid.html\" title=\"trait newtype_uuid::GenericUuid\">GenericUuid</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_untyped_uuid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#909\">Source</a><a href=\"#method.from_untyped_uuid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.from_untyped_uuid\" class=\"fn\">from_untyped_uuid</a>(uuid: <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Creates a new instance of <code>Self</code> from an untyped <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\"><code>Uuid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_untyped_uuid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#917\">Source</a><a href=\"#method.into_untyped_uuid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.into_untyped_uuid\" class=\"fn\">into_untyped_uuid</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into an untyped <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\"><code>Uuid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_untyped_uuid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#922\">Source</a><a href=\"#method.as_untyped_uuid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.as_untyped_uuid\" class=\"fn\">as_untyped_uuid</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Returns the inner <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\"><code>Uuid</code></a>. <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.as_untyped_uuid\">Read more</a></div></details></div></details>","GenericUuid","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#449\">Source</a><a href=\"#impl-Hash-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#451\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#530-532\">Source</a><a href=\"#impl-JsonSchema-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; JsonSchema for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a> + JsonSchema,</div></h3><div class=\"docblock\"><p>Implements <code>JsonSchema</code> for <code>TypedUuid&lt;T&gt;</code>, if <code>T</code> implements <code>JsonSchema</code>.</p>\n</div></section></summary><div class=\"docblock\"><ul>\n<li><code>schema_name</code> is set to <code>\"TypedUuidFor\"</code>, concatenated by the schema name of <code>T</code>.</li>\n<li><code>schema_id</code> is set to <code>format!(\"newtype_uuid::TypedUuid&lt;{}&gt;\", T::schema_id())</code>.</li>\n<li><code>json_schema</code> is the same as the one for <code>Uuid</code>, with the <code>x-rust-type</code> extension\nto allow automatic replacement in typify and progenitor.</li>\n</ul>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#535\">Source</a><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#545\">Source</a><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#550\">Source</a><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">json_schema</a>(generator: &amp;mut SchemaGenerator) -&gt; Schema</h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a>Read more</a></div></details></div></details>","JsonSchema","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#442\">Source</a><a href=\"#impl-Ord-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#444\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#426\">Source</a><a href=\"#impl-PartialEq-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#428\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#435\">Source</a><a href=\"#impl-PartialOrd-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#437\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#impl-Serialize-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#184\">Source</a><a href=\"#impl-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nil\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#195\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.nil\" class=\"fn\">nil</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>The ‘nil UUID’ (all zeros).</p>\n<p>The nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.</p>\n<h5 id=\"references\"><a class=\"doc-anchor\" href=\"#references\">§</a>References</h5>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc4122.html#section-4.1.7\">Nil UUID in RFC4122</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#212\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.max\" class=\"fn\">max</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>The ‘max UUID’ (all ones).</p>\n<p>The max UUID is a special form of UUID that is specified to have all\n128 bits set to one.</p>\n<h5 id=\"references-1\"><a class=\"doc-anchor\" href=\"#references-1\">§</a>References</h5>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-5.4\">Max UUID in Draft RFC: New UUID Formats, Version 4</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fields\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#222\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_fields\" class=\"fn\">from_fields</a>(d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d4: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from four field values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fields_le\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#236\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_fields_le\" class=\"fn\">from_fields_le</a>(\n    d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>,\n    d3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>,\n    d4: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>],\n) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from four field values in little-endian order.</p>\n<p>The bytes in the <code>d1</code>, <code>d2</code> and <code>d3</code> fields will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the target environment so\nbytes will be flipped on both big and little endian machines.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#246\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_u128\" class=\"fn\">from_u128</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from a 128bit value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128_le\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#260\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_u128_le\" class=\"fn\">from_u128_le</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from a 128bit value in little-endian order.</p>\n<p>The entire value will be flipped to convert into big-endian order. This is based on the\nendianness of the UUID, rather than the target environment so bytes will be flipped on both\nbig and little endian machines.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64_pair\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#270\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_u64_pair\" class=\"fn\">from_u64_pair</a>(d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>, d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from two 64bit values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#280\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_le\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#292\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_bytes_le\" class=\"fn\">from_bytes_le</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes in little-endian order.</p>\n<p>The individual fields encoded in the buffer will be flipped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_v4\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#303\">Source</a><h4 class=\"code-header\">pub fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.new_v4\" class=\"fn\">new_v4</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, random UUID v4 of this type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_v7\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#311\">Source</a><h4 class=\"code-header\">pub fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.new_v7\" class=\"fn\">new_v7</a>(ts: <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/timestamp/struct.Timestamp.html\" title=\"struct uuid::timestamp::Timestamp\">Timestamp</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, random UUID v7 of this type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version_num\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#324\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.get_version_num\" class=\"fn\">get_version_num</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the version number of the UUID.</p>\n<p>This represents the algorithm used to generate the value.\nThis method is the future-proof alternative to <a href=\"newtype_uuid/struct.TypedUuid.html#method.get_version\" title=\"method newtype_uuid::TypedUuid::get_version\"><code>Self::get_version</code></a>.</p>\n<h5 id=\"references-2\"><a class=\"doc-anchor\" href=\"#references-2\">§</a>References</h5>\n<ul>\n<li><a href=\"https://www.ietf.org/rfc/rfc9562.html#section-4.2\">Version Field in RFC 9562</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#341\">Source</a><h4 class=\"code-header\">pub fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.get_version\" class=\"fn\">get_version</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://docs.rs/uuid/1.18.1/uuid/enum.Version.html\" title=\"enum uuid::Version\">Version</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the version of the UUID.</p>\n<p>This represents the algorithm used to generate the value.\nIf the version field doesn’t contain a recognized version then <code>None</code>\nis returned. If you’re trying to read the version for a future extension\nyou can also use <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html#method.get_version_num\" title=\"method uuid::Uuid::get_version_num\"><code>Uuid::get_version_num</code></a> to unconditionally return a\nnumber. Future extensions may start to return <code>Some</code> once they’re\nstandardized and supported.</p>\n<h5 id=\"references-3\"><a class=\"doc-anchor\" href=\"#references-3\">§</a>References</h5>\n<ul>\n<li><a href=\"https://www.ietf.org/rfc/rfc9562.html#section-4.2\">Version Field in RFC 9562</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upcast\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#411-413\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.upcast\" class=\"fn\">upcast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts the UUID to one with looser semantics.</p>\n<p>By default, UUID kinds are considered independent, and conversions\nbetween them must happen via the <a href=\"newtype_uuid/trait.GenericUuid.html\" title=\"trait newtype_uuid::GenericUuid\"><code>GenericUuid</code></a> interface. But in some\ncases, there may be a relationship between two different UUID kinds, and\nyou may wish to easily convert UUIDs from one kind to another.</p>\n<p>Typically, a conversion from <code>TypedUuid&lt;T&gt;</code> to <code>TypedUuid&lt;U&gt;</code> is most\nuseful when <code>T</code>’s semantics are a superset of <code>U</code>’s, or in other words,\nwhen every <code>TypedUuid&lt;T&gt;</code> is logically also a <code>TypedUuid&lt;U&gt;</code>.</p>\n<p>For instance:</p>\n<ul>\n<li>Imagine you have <a href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\"><code>TypedUuidKind</code></a>s for different types of\ndatabase connections, where <code>DbConnKind</code> is the general type\nand <code>PgConnKind</code> is a specific kind for Postgres.</li>\n<li>Since every Postgres connection is also a database connection,\na cast from <code>TypedUuid&lt;PgConnKind&gt;</code> to <code>TypedUuid&lt;DbConnKind&gt;</code>\nmakes sense.</li>\n<li>The inverse cast would not make sense, as a database connection may not\nnecessarily be a Postgres connection.</li>\n</ul>\n<p>This interface provides an alternative, safer way to perform this\nconversion. Indicate your intention to allow a conversion between kinds\nby implementing <code>From&lt;T&gt; for U</code>, as shown in the example below.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>newtype_uuid::{TypedUuid, TypedUuidKind, TypedUuidTag};\n\n<span class=\"comment\">// Let's say that these UUIDs represent repositories for different\n// version control systems, such that you have a generic RepoKind:\n</span><span class=\"kw\">pub enum </span>RepoKind {}\n<span class=\"kw\">impl </span>TypedUuidKind <span class=\"kw\">for </span>RepoKind {\n    <span class=\"kw\">fn </span>tag() -&gt; TypedUuidTag {\n        <span class=\"kw\">const </span>TAG: TypedUuidTag = TypedUuidTag::new(<span class=\"string\">\"repo\"</span>);\n        TAG\n    }\n}\n\n<span class=\"comment\">// You also have more specific kinds:\n</span><span class=\"kw\">pub enum </span>GitRepoKind {}\n<span class=\"kw\">impl </span>TypedUuidKind <span class=\"kw\">for </span>GitRepoKind {\n    <span class=\"kw\">fn </span>tag() -&gt; TypedUuidTag {\n        <span class=\"kw\">const </span>TAG: TypedUuidTag = TypedUuidTag::new(<span class=\"string\">\"git_repo\"</span>);\n        TAG\n    }\n}\n<span class=\"comment\">// (and HgRepoKind, JujutsuRepoKind, etc...)\n\n// First, define a `From` impl. This impl indicates your desire\n// to convert from one kind to another.\n</span><span class=\"kw\">impl </span>From&lt;GitRepoKind&gt; <span class=\"kw\">for </span>RepoKind {\n    <span class=\"kw\">fn </span>from(value: GitRepoKind) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">match </span>value {}\n    }\n}\n\n<span class=\"comment\">// Now you can convert between them:\n</span><span class=\"kw\">let </span>git_uuid: TypedUuid&lt;GitRepoKind&gt; =\n    TypedUuid::from_u128(<span class=\"number\">0xe9245204_34ea_4ca7_a1c6_2e94fa49df61</span>);\n<span class=\"kw\">let </span>repo_uuid: TypedUuid&lt;RepoKind&gt; = git_uuid.upcast();</code></pre></div>\n</div></details></div></details>",0,"e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<section id=\"impl-Copy-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#476\">Source</a><a href=\"#impl-Copy-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section>","Copy","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"],["<section id=\"impl-Eq-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Eq-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section>","Eq","e2e_kinds::UserUuid","e2e_kinds::OrganizationUuid"]]],["e2e_schema_producer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arbitrary-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#649-651\">Source</a><a href=\"#impl-Arbitrary-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Arbitrary for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3><div class=\"docblock\"><p>Generates random <code>TypedUuid&lt;T&gt;</code> instances.</p>\n</div></section></summary><div class=\"docblock\"><p>Currently, this always returns a version 4 UUID. Support for other kinds\nof UUIDs might be added via <a href=\"newtype_uuid/struct.TypedUuid.html#associatedtype.Parameters\" title=\"associated type newtype_uuid::TypedUuid::Parameters\"><code>Self::Parameters</code></a> in the future.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Parameters\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#653\">Source</a><a href=\"#associatedtype.Parameters\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Parameters</a> = TypedUuidParams</h4></section></summary><div class='docblock'>The type of parameters that <a href=\"trait.Arbitrary.html#tymethod.arbitrary_with\"><code>arbitrary_with</code></a> accepts for configuration\nof the generated <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a>. Parameters must implement <a href=\"https://doc.rust-lang.org/nightly/std/default/trait.Default.html\"><code>Default</code></a>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Strategy\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#654\">Source</a><a href=\"#associatedtype.Strategy\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Strategy</a> = BoxedStrategy&lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The type of <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> used to generate values of type <code>Self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#656\">Source</a><a href=\"#method.arbitrary_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arbitrary_with</a>(\n    _args: &lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt; as Arbitrary&gt;::Parameters,\n) -&gt; &lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt; as Arbitrary&gt;::Strategy</h4></section></summary><div class='docblock'>Generates a <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> for producing arbitrary values of type the\nimplementing type (<code>Self</code>). The strategy is passed the arguments given\nin args. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary\" class=\"method trait-impl\"><a href=\"#method.arbitrary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arbitrary</a>() -&gt; Self::Strategy</h4></section></summary><div class='docblock'>Generates a <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> for producing arbitrary values\nof type the implementing type (<code>Self</code>). <a>Read more</a></div></details></div></details>","Arbitrary","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#497\">Source</a><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#499\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#469\">Source</a><a href=\"#impl-Clone-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#471\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#456\">Source</a><a href=\"#impl-Debug-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#457\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#490\">Source</a><a href=\"#impl-Default-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#492\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#463\">Source</a><a href=\"#impl-Display-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#464\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#478\">Source</a><a href=\"#impl-FromStr-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#479\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"newtype_uuid/struct.ParseError.html\" title=\"struct newtype_uuid::ParseError\">ParseError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#481\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;, &lt;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericUuid-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#907\">Source</a><a href=\"#impl-GenericUuid-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"newtype_uuid/trait.GenericUuid.html\" title=\"trait newtype_uuid::GenericUuid\">GenericUuid</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_untyped_uuid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#909\">Source</a><a href=\"#method.from_untyped_uuid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.from_untyped_uuid\" class=\"fn\">from_untyped_uuid</a>(uuid: <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Creates a new instance of <code>Self</code> from an untyped <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\"><code>Uuid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_untyped_uuid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#917\">Source</a><a href=\"#method.into_untyped_uuid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.into_untyped_uuid\" class=\"fn\">into_untyped_uuid</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into an untyped <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\"><code>Uuid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_untyped_uuid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#922\">Source</a><a href=\"#method.as_untyped_uuid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.as_untyped_uuid\" class=\"fn\">as_untyped_uuid</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a></h4></section></summary><div class='docblock'>Returns the inner <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\"><code>Uuid</code></a>. <a href=\"newtype_uuid/trait.GenericUuid.html#tymethod.as_untyped_uuid\">Read more</a></div></details></div></details>","GenericUuid","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#449\">Source</a><a href=\"#impl-Hash-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#451\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#530-532\">Source</a><a href=\"#impl-JsonSchema-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; JsonSchema for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a> + JsonSchema,</div></h3><div class=\"docblock\"><p>Implements <code>JsonSchema</code> for <code>TypedUuid&lt;T&gt;</code>, if <code>T</code> implements <code>JsonSchema</code>.</p>\n</div></section></summary><div class=\"docblock\"><ul>\n<li><code>schema_name</code> is set to <code>\"TypedUuidFor\"</code>, concatenated by the schema name of <code>T</code>.</li>\n<li><code>schema_id</code> is set to <code>format!(\"newtype_uuid::TypedUuid&lt;{}&gt;\", T::schema_id())</code>.</li>\n<li><code>json_schema</code> is the same as the one for <code>Uuid</code>, with the <code>x-rust-type</code> extension\nto allow automatic replacement in typify and progenitor.</li>\n</ul>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#535\">Source</a><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#545\">Source</a><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#550\">Source</a><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">json_schema</a>(generator: &amp;mut SchemaGenerator) -&gt; Schema</h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a>Read more</a></div></details></div></details>","JsonSchema","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#442\">Source</a><a href=\"#impl-Ord-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#444\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#426\">Source</a><a href=\"#impl-PartialEq-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#428\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#435\">Source</a><a href=\"#impl-PartialOrd-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#437\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#impl-Serialize-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#177\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#184\">Source</a><a href=\"#impl-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nil\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#195\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.nil\" class=\"fn\">nil</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>The ‘nil UUID’ (all zeros).</p>\n<p>The nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.</p>\n<h5 id=\"references\"><a class=\"doc-anchor\" href=\"#references\">§</a>References</h5>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc4122.html#section-4.1.7\">Nil UUID in RFC4122</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#212\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.max\" class=\"fn\">max</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>The ‘max UUID’ (all ones).</p>\n<p>The max UUID is a special form of UUID that is specified to have all\n128 bits set to one.</p>\n<h5 id=\"references-1\"><a class=\"doc-anchor\" href=\"#references-1\">§</a>References</h5>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-5.4\">Max UUID in Draft RFC: New UUID Formats, Version 4</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fields\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#222\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_fields\" class=\"fn\">from_fields</a>(d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>, d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>, d4: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from four field values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fields_le\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#236\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_fields_le\" class=\"fn\">from_fields_le</a>(\n    d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u32.html\">u32</a>,\n    d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>,\n    d3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>,\n    d4: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">8</a>],\n) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from four field values in little-endian order.</p>\n<p>The bytes in the <code>d1</code>, <code>d2</code> and <code>d3</code> fields will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the target environment so\nbytes will be flipped on both big and little endian machines.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#246\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_u128\" class=\"fn\">from_u128</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from a 128bit value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128_le\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#260\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_u128_le\" class=\"fn\">from_u128_le</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from a 128bit value in little-endian order.</p>\n<p>The entire value will be flipped to convert into big-endian order. This is based on the\nendianness of the UUID, rather than the target environment so bytes will be flipped on both\nbig and little endian machines.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64_pair\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#270\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_u64_pair\" class=\"fn\">from_u64_pair</a>(d1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>, d2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID from two 64bit values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#280\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_le\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#292\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.from_bytes_le\" class=\"fn\">from_bytes_le</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a UUID using the supplied bytes in little-endian order.</p>\n<p>The individual fields encoded in the buffer will be flipped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_v4\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#303\">Source</a><h4 class=\"code-header\">pub fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.new_v4\" class=\"fn\">new_v4</a>() -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, random UUID v4 of this type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_v7\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#311\">Source</a><h4 class=\"code-header\">pub fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.new_v7\" class=\"fn\">new_v7</a>(ts: <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/timestamp/struct.Timestamp.html\" title=\"struct uuid::timestamp::Timestamp\">Timestamp</a>) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, random UUID v7 of this type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version_num\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#324\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.get_version_num\" class=\"fn\">get_version_num</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the version number of the UUID.</p>\n<p>This represents the algorithm used to generate the value.\nThis method is the future-proof alternative to <a href=\"newtype_uuid/struct.TypedUuid.html#method.get_version\" title=\"method newtype_uuid::TypedUuid::get_version\"><code>Self::get_version</code></a>.</p>\n<h5 id=\"references-2\"><a class=\"doc-anchor\" href=\"#references-2\">§</a>References</h5>\n<ul>\n<li><a href=\"https://www.ietf.org/rfc/rfc9562.html#section-4.2\">Version Field in RFC 9562</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#341\">Source</a><h4 class=\"code-header\">pub fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.get_version\" class=\"fn\">get_version</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://docs.rs/uuid/1.18.1/uuid/enum.Version.html\" title=\"enum uuid::Version\">Version</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the version of the UUID.</p>\n<p>This represents the algorithm used to generate the value.\nIf the version field doesn’t contain a recognized version then <code>None</code>\nis returned. If you’re trying to read the version for a future extension\nyou can also use <a href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html#method.get_version_num\" title=\"method uuid::Uuid::get_version_num\"><code>Uuid::get_version_num</code></a> to unconditionally return a\nnumber. Future extensions may start to return <code>Some</code> once they’re\nstandardized and supported.</p>\n<h5 id=\"references-3\"><a class=\"doc-anchor\" href=\"#references-3\">§</a>References</h5>\n<ul>\n<li><a href=\"https://www.ietf.org/rfc/rfc9562.html#section-4.2\">Version Field in RFC 9562</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upcast\" class=\"method\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#411-413\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"newtype_uuid/struct.TypedUuid.html#tymethod.upcast\" class=\"fn\">upcast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts the UUID to one with looser semantics.</p>\n<p>By default, UUID kinds are considered independent, and conversions\nbetween them must happen via the <a href=\"newtype_uuid/trait.GenericUuid.html\" title=\"trait newtype_uuid::GenericUuid\"><code>GenericUuid</code></a> interface. But in some\ncases, there may be a relationship between two different UUID kinds, and\nyou may wish to easily convert UUIDs from one kind to another.</p>\n<p>Typically, a conversion from <code>TypedUuid&lt;T&gt;</code> to <code>TypedUuid&lt;U&gt;</code> is most\nuseful when <code>T</code>’s semantics are a superset of <code>U</code>’s, or in other words,\nwhen every <code>TypedUuid&lt;T&gt;</code> is logically also a <code>TypedUuid&lt;U&gt;</code>.</p>\n<p>For instance:</p>\n<ul>\n<li>Imagine you have <a href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\"><code>TypedUuidKind</code></a>s for different types of\ndatabase connections, where <code>DbConnKind</code> is the general type\nand <code>PgConnKind</code> is a specific kind for Postgres.</li>\n<li>Since every Postgres connection is also a database connection,\na cast from <code>TypedUuid&lt;PgConnKind&gt;</code> to <code>TypedUuid&lt;DbConnKind&gt;</code>\nmakes sense.</li>\n<li>The inverse cast would not make sense, as a database connection may not\nnecessarily be a Postgres connection.</li>\n</ul>\n<p>This interface provides an alternative, safer way to perform this\nconversion. Indicate your intention to allow a conversion between kinds\nby implementing <code>From&lt;T&gt; for U</code>, as shown in the example below.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>newtype_uuid::{TypedUuid, TypedUuidKind, TypedUuidTag};\n\n<span class=\"comment\">// Let's say that these UUIDs represent repositories for different\n// version control systems, such that you have a generic RepoKind:\n</span><span class=\"kw\">pub enum </span>RepoKind {}\n<span class=\"kw\">impl </span>TypedUuidKind <span class=\"kw\">for </span>RepoKind {\n    <span class=\"kw\">fn </span>tag() -&gt; TypedUuidTag {\n        <span class=\"kw\">const </span>TAG: TypedUuidTag = TypedUuidTag::new(<span class=\"string\">\"repo\"</span>);\n        TAG\n    }\n}\n\n<span class=\"comment\">// You also have more specific kinds:\n</span><span class=\"kw\">pub enum </span>GitRepoKind {}\n<span class=\"kw\">impl </span>TypedUuidKind <span class=\"kw\">for </span>GitRepoKind {\n    <span class=\"kw\">fn </span>tag() -&gt; TypedUuidTag {\n        <span class=\"kw\">const </span>TAG: TypedUuidTag = TypedUuidTag::new(<span class=\"string\">\"git_repo\"</span>);\n        TAG\n    }\n}\n<span class=\"comment\">// (and HgRepoKind, JujutsuRepoKind, etc...)\n\n// First, define a `From` impl. This impl indicates your desire\n// to convert from one kind to another.\n</span><span class=\"kw\">impl </span>From&lt;GitRepoKind&gt; <span class=\"kw\">for </span>RepoKind {\n    <span class=\"kw\">fn </span>from(value: GitRepoKind) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">match </span>value {}\n    }\n}\n\n<span class=\"comment\">// Now you can convert between them:\n</span><span class=\"kw\">let </span>git_uuid: TypedUuid&lt;GitRepoKind&gt; =\n    TypedUuid::from_u128(<span class=\"number\">0xe9245204_34ea_4ca7_a1c6_2e94fa49df61</span>);\n<span class=\"kw\">let </span>repo_uuid: TypedUuid&lt;RepoKind&gt; = git_uuid.upcast();</code></pre></div>\n</div></details></div></details>",0,"e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<section id=\"impl-Copy-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#476\">Source</a><a href=\"#impl-Copy-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section>","Copy","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"],["<section id=\"impl-Eq-for-TypedUuid%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/newtype_uuid/lib.rs.html#433\">Source</a><a href=\"#impl-Eq-for-TypedUuid%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"newtype_uuid/struct.TypedUuid.html\" title=\"struct newtype_uuid::TypedUuid\">TypedUuid</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"newtype_uuid/trait.TypedUuidKind.html\" title=\"trait newtype_uuid::TypedUuidKind\">TypedUuidKind</a>,</div></h3></section>","Eq","e2e_schema_producer::OrganizationUuid","e2e_schema_producer::UserUuid"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[64131,64502]}